<SCRIPTMAGIC NAME="Script Magic Demo" HOSTID="" RUNMODE="INTERACTIVE" PASSWORD="" CREATED="05 Aug 2004 02:41 PM" CREATEDBY="SYSTEM" LASTMODIFIED="" LASTMODIFIEDBY="" FILENAME="" AUTHOR="Ed Daniel" TIMEOUT="5" EXPLICIT="1"><DESCRIPTION>'Forms printing in iSoft.  Script to initialize the forms printing object
'and send the XML structure to the service and add to the print queue
</DESCRIPTION><INPUT COUNT="0"/><INITIALIZATION>'Step 1 Call the Main Processing Sub Routine
smDebug.Echo "Project is running"
ReturnValue = "The code is initialized" 
smEvent.Raise "Event Raised in Initialization","3.14,56,222"
Call Main()

Public Sub MySub(a)
msgbox "My Sub Called with parameter: " &amp; a

End Sub 

Public Function MyFunc(a,b,c)
	Msgbox "MyFunc Called With a=" &amp; a &amp; " b=" &amp; b &amp; "c=" &amp; c
	MyFunc = a + b + c
End Function</INITIALIZATION><SUBROUTINES COUNT="4"><SUBROUTINE NAME="Main" PARAMETERS="" SCOPE="Public">Dim x
Do While True
Select Case MsgBox("This message box and the resulting processing code was generated by the ""Script Magic"" Message box wizard.  It's easy to create message boxes for practically any type of processing." &amp; vblf &amp; "" &amp; vblf &amp; "Embedded new lines are supported as well as multiple button selections and default button assignment." &amp; vblf &amp; "Would you like to see this Message box again?",vbYesNoCancel + vbCritical + vbDefaultButton2,"Code Generated Message Box") 
   Case vbYes
      Msgbox "User Pressed Yes"
   Case vbNo
	Msgbox "User Pressed No.  Good Bye"
      Exit Do
   Case vbCancel
	Msgbox "User Pressed Cancel.  Good Bye"
      Exit Do
End Select
Loop

ReturnValue = "This is a return value.  " &amp; vbcrlf &amp; _
"So is this" 
set x = new MyClass1
x.ShowMessage
Set x = nothing</SUBROUTINE><SUBROUTINE id="" NAME="MySubRoutine2" PARAMETERS="x, y" SCOPE="Public">'
Do While True
	Select Case MsgBox("x = " &amp; x &amp; " and y = " &amp; y &amp; vblf &amp; "View Again?",vbYesNo + vbCritical + vbDefaultButton1,"Example Method Execution") 
	   Case vbYes
      	Msgbox "User Pressed Yes Show Me Again"
	   Case vbNo
		exit do
End Select
Loop</SUBROUTINE>
		<SUBROUTINE id="" NAME="MySubRoutine3" PARAMETERS="" SCOPE="Public">'
MsgBox "TO DO: Add processing code for MySubRoutine3"
'
</SUBROUTINE>
		<SUBROUTINE id="" NAME="ShowCaptions" PARAMETERS="" SCOPE="Public">'
Msgbox "Command1.Caption = " &amp; ParentForm.Command1.Caption 
Msgbox "Command1.Caption = " &amp; ParentForm.Command2.Caption 
Msgbox "Command1.Caption = " &amp; ParentForm.Command3.Caption 
Msgbox "Command1.Caption = " &amp; ParentForm.Command4.Caption 
Msgbox "Command1.Caption = " &amp; ParentForm.Command5.Caption 
Msgbox "Command1.Caption = " &amp; ParentForm.Command6.Caption 
Msgbox "Command1.Caption = " &amp; ParentForm.Command7.Caption</SUBROUTINE>
	</SUBROUTINES><FUNCTIONS COUNT="5"><FUNCTION id="" NAME="MyFunction1" PARAMETERS="x, y, z" SCOPE="Public">Dim retValue 
returnValue = "MyFunction1 Executing"
AnotherPublic = "The quick brown fox jumped over the lazy dog " &amp; (6/2) &amp; " times" 
retValue = x + y + z
MyFunction1 = retValue 
Exit Function</FUNCTION>
		<FUNCTION id="" NAME="AnotherNewLongFunctionName" PARAMETERS="NewValue, Oldvalue, OptionValue" SCOPE="Public">Dim retValue 
retValue = NewValue + OldValue + OptionValue
AnotherNewLongFunctionName = retValue</FUNCTION>
		<FUNCTION id="" NAME="MyFunction3" PARAMETERS="x" SCOPE="Public">MyFunction3 = Now</FUNCTION>
		<FUNCTION id="" NAME="MyFunction4" PARAMETERS="CalcValue" SCOPE="Public">Dim retValue 
msgbox sQuote(calcValue) &amp; " was sent in to me"</FUNCTION>
		<FUNCTION id="" NAME="sQuote" PARAMETERS="strInput" SCOPE="Private">Dim retValue 
retValue = "'" &amp; strInput &amp; "'"
sQuote = retValue</FUNCTION>
	</FUNCTIONS><CLASSES COUNT="3"><CLASS NAME="MyClass1" PARAMETERS="" SCOPE="Public">Public MyName
Private NewClass
'Class Constructor
Private Sub Class_Initialize()
SMDebug.Echo "MyClass1 initialized"
Set NewClass = New MyClass2
End Sub
'Public Properties And Methods


'Class Methods 
Public Sub ShowMessage()
MyName = "This is a public variable in MyClass1"
Select Case MsgBox("This message generated from a public Class Method.  Click Yes to see another message generated by a private class Member.",vbYesNoCancel + vbCritical + vbDefaultButton1,"Class Member Message Box") 
   Case vbYes
      AnotherMessage
   Case vbNo
      Msgbox "User Pressed No"
   Case vbCancel
      Msgbox "User Pressed Cancel"
End Select

End Sub

Private Sub AnotherMessage()

MsgBox "Displayed by a private Class Method",vbOKOnly + vbCritical + vbDefaultButton1,"Private Class Demo"
	
End Sub 
'Class Destructor
Private Sub Class_Terminate()
SMDebug.Echo "MyClass1 Terminated"
Set NewClass = Nothing

End Sub</CLASS><CLASS NAME="MyClass2" SCOPE="Public" PARAMETERS="">'Private Variables

'Class Constructor
Private Sub Class_Initialize()
 SMDebug.Echo "MyClass2 initialized"

End Sub
'Public Properties And Methods

'Class Destructor
Private Sub Class_Terminate()
SMDebug.Echo "MyClass2 Terminated"
End Sub</CLASS><CLASS NAME="MyClass3" SCOPE="Public">'Private Variables

'Class Constructor
Private Sub Class_Initialize()
  'Automatically called when class is created.  Place initialization code here
End Sub
'Public Properties And Methods

'Class Destructor
Private Sub Class_Terminate()
  'Automatically called when class is Destroyed.  Place any cleanup code here
End Sub
</CLASS></CLASSES><CONSTANTS COUNT="3"><CONSTANT NAME="PI" VALUE="3.14" TYPE="NUMBER"></CONSTANT>
		<CONSTANT NAME="MyPhone" VALUE="473-5902" TYPE="STRING"></CONSTANT>
		<CONSTANT NAME="myAddress" VALUE="967 East Coast Road" TYPE="STRING"></CONSTANT>
	</CONSTANTS>
	<VARIABLES COUNT="2"><VARIABLE NAME="ReturnValue"></VARIABLE>
		<VARIABLE NAME="AnotherPublic"></VARIABLE>
	</VARIABLES>
	<VBSCRIPT>Option Explicit '«LN:8»
Public Const PI = 3.14 '«LN:13»
Public Const MyPhone = "473-5902" '«LN:14»
Public Const myAddress = "967 East Coast Road" '«LN:15»
Public ReturnValue '«LN:18»
Public AnotherPublic '«LN:19»
smDebug.Echo "Project is running" '«LN:27»
ReturnValue = "The code is initialized" '«LN:28»
smEvent.Raise "Event Raised in Initialization","3.14,56,222" '«LN:29»
Call Main() '«LN:30»
Public Sub MySub(a) '«LN:32»
msgbox "My Sub Called with parameter: " &amp; a '«LN:33»
End Sub '«LN:35»
Public Function MyFunc(a,b,c) '«LN:37»
	Msgbox "MyFunc Called With a=" &amp; a &amp; " b=" &amp; b &amp; "c=" &amp; c '«LN:38»
	MyFunc = a + b + c '«LN:39»
End Function '«LN:40»
Public Sub Main() '«LN:44»
Dim x '«LN:45»
Do While True '«LN:46»
Select Case MsgBox("This message box and the resulting processing code was generated by the ""Script Magic"" Message box wizard.  It's easy to create message boxes for practically any type of processing." &amp; vblf &amp; "" &amp; vblf &amp; "Embedded new lines are supported as well as multiple button selections and default button assignment." &amp; vblf &amp; "Would you like to see this Message box again?",vbYesNoCancel + vbCritical + vbDefaultButton2,"Code Generated Message Box") '«LN:47»
Case vbYes '«LN:48»
Msgbox "User Pressed Yes" '«LN:49»
Case vbNo '«LN:50»
	Msgbox "User Pressed No.  Good Bye" '«LN:51»
Exit Do '«LN:52»
Case vbCancel '«LN:53»
	Msgbox "User Pressed Cancel.  Good Bye" '«LN:54»
Exit Do '«LN:55»
End Select '«LN:56»
Loop '«LN:57»
ReturnValue = "This is a return value.  " &amp; vbcrlf &amp; _ '«LN:59»
"So is this" '«LN:60»
set x = new MyClass1 '«LN:61»
x.ShowMessage '«LN:62»
Set x = nothing '«LN:63»
End Sub '«LN:64»
Public Sub MySubRoutine2(x, y) '«LN:67»
Do While True '«LN:69»
	Select Case MsgBox("x = " &amp; x &amp; " and y = " &amp; y &amp; vblf &amp; "View Again?",vbYesNo + vbCritical + vbDefaultButton1,"Example Method Execution") '«LN:70»
	   Case vbYes '«LN:71»
	Msgbox "User Pressed Yes Show Me Again" '«LN:72»
	   Case vbNo '«LN:73»
		exit do '«LN:74»
End Select '«LN:75»
Loop '«LN:76»
End Sub '«LN:77»
Public Sub MySubRoutine3() '«LN:80»
MsgBox "TO DO: Add processing code for MySubRoutine3" '«LN:82»
End Sub '«LN:84»
Public Sub ShowCaptions() '«LN:87»
Msgbox "Command1.Caption = " &amp; ParentForm.Command1.Caption '«LN:89»
Msgbox "Command1.Caption = " &amp; ParentForm.Command2.Caption '«LN:90»
Msgbox "Command1.Caption = " &amp; ParentForm.Command3.Caption '«LN:91»
Msgbox "Command1.Caption = " &amp; ParentForm.Command4.Caption '«LN:92»
Msgbox "Command1.Caption = " &amp; ParentForm.Command5.Caption '«LN:93»
Msgbox "Command1.Caption = " &amp; ParentForm.Command6.Caption '«LN:94»
Msgbox "Command1.Caption = " &amp; ParentForm.Command7.Caption '«LN:95»
End Sub '«LN:96»
Public Function MyFunction1(x, y, z) '«LN:101»
Dim retValue '«LN:102»
returnValue = "MyFunction1 Executing" '«LN:103»
AnotherPublic = "The quick brown fox jumped over the lazy dog " &amp; (6/2) &amp; " times" '«LN:104»
retValue = x + y + z '«LN:105»
MyFunction1 = retValue '«LN:106»
Exit Function '«LN:107»
End Function '«LN:108»
Public Function AnotherNewLongFunctionName(NewValue, Oldvalue, OptionValue) '«LN:111»
Dim retValue '«LN:112»
retValue = NewValue + OldValue + OptionValue '«LN:113»
AnotherNewLongFunctionName = retValue '«LN:114»
End Function '«LN:115»
Public Function MyFunction3(x) '«LN:118»
MyFunction3 = Now '«LN:119»
End Function '«LN:120»
Public Function MyFunction4(CalcValue) '«LN:123»
Dim retValue '«LN:124»
msgbox sQuote(calcValue) &amp; " was sent in to me" '«LN:125»
End Function '«LN:126»
Private Function sQuote(strInput) '«LN:129»
Dim retValue '«LN:130»
retValue = "'" &amp; strInput &amp; "'" '«LN:131»
sQuote = retValue '«LN:132»
End Function '«LN:133»
Class MyClass1 '«LN:138»
Public MyName '«LN:139»
Private NewClass '«LN:140»
Private Sub Class_Initialize() '«LN:142»
SMDebug.Echo "MyClass1 initialized" '«LN:143»
Set NewClass = New MyClass2 '«LN:144»
End Sub '«LN:145»
Public Sub ShowMessage() '«LN:150»
MyName = "This is a public variable in MyClass1" '«LN:151»
Select Case MsgBox("This message generated from a public Class Method.  Click Yes to see another message generated by a private class Member.",vbYesNoCancel + vbCritical + vbDefaultButton1,"Class Member Message Box") '«LN:152»
Case vbYes '«LN:153»
AnotherMessage '«LN:154»
Case vbNo '«LN:155»
Msgbox "User Pressed No" '«LN:156»
Case vbCancel '«LN:157»
Msgbox "User Pressed Cancel" '«LN:158»
End Select '«LN:159»
End Sub '«LN:161»
Private Sub AnotherMessage() '«LN:163»
MsgBox "Displayed by a private Class Method",vbOKOnly + vbCritical + vbDefaultButton1,"Private Class Demo" '«LN:165»
	 '«LN:166»
End Sub '«LN:167»
Private Sub Class_Terminate() '«LN:169»
SMDebug.Echo "MyClass1 Terminated" '«LN:170»
Set NewClass = Nothing '«LN:171»
End Sub '«LN:173»
End Class '«LN:174»
Class MyClass2 '«LN:177»
Private Sub Class_Initialize() '«LN:181»
SMDebug.Echo "MyClass2 initialized" '«LN:182»
End Sub '«LN:184»
Private Sub Class_Terminate() '«LN:188»
SMDebug.Echo "MyClass2 Terminated" '«LN:189»
End Sub '«LN:190»
End Class '«LN:191»
</VBSCRIPT></SCRIPTMAGIC>
